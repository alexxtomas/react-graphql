Para hacer una query a graphql siemmpre tiene el mismo end point y la peticion siempre debe ser de tipo POST, pero en el body de la request
podemos indicar que queremos hacer por ejemplo para una query seria -> "query": "query { allPersons { name } }"

Una alternativa a creat-react-app es @vitejs para ejecutarlo -> npm init vite nombreDelProyecto -- --template react
Vitejs es un empaquetador de aplicaciones igual que los webpack y nos crea la aplicacion mas rapido que creat-react-app porque es mas moderno.

relay.dev es el cliente de GraphQl que esta utilizando facebook en sus productos

Watch -> https://www.facebook.com/watch/?v=1752210688215238

Vamos a utilizar el cliente de apollo-client para React
Para ello necesitamos instalar -> npm install @apollo/client graphql

Al usar el useQuery nos devuelve un objeto que tiene mucha informacion pero la mas importante es el loading, data y error
La primera vez que se realice la query va a tener el loading en true y el data va a ser undefinded
Despues nos devuelve ya los resultados con el data con la informacion realizada con la query o si hay un error pues se encontrara en la 
propiedad del objeto error y el loading estara en false


Apollo Client Developer Tools -> Instalamos la extension y a√±adimos en el client el connectToDevTools: true
Podemos ver la cache las queries y mucha infromacion mas

Al realizar la mutacion de editNumber se actualiza automaticamente el numero, eso es debido a que el apolloclient ve que la persona
tiene una id y lo que hace es mirar la cache y ve que hay una misma persona con la misma id en la cache y la cambia automaticamente
Para ello debes devolver la id en la mutacion si no esto no funcionara y el dato a cambiar en este caso el phone
